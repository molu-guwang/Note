namespace
user 内核版本大于等于3.8

pod
隔离


Taints污点和Tolerations容忍概述
节点和Pod亲和力，是将Pod吸引到一组节点【根据拓扑域】（作为优选或硬性要求）。污点（Taints）则相反，它们允许一个节点排斥一组Pod。
容忍（Tolerations）应用于pod，允许（但不强制要求）pod调度到具有匹配污点的节点上。

污点（Taints）和容忍（Tolerations）共同作用，确保pods不会被调度到不适当的节点。一个或多个污点应用于节点；这标志着该节点不应该接受任何不容忍污点的Pod。
说明：我们在平常使用中发现pod不会调度到k8s的master节点，就是因为master节点存在污点。


Taints污点
Taints污点的组成
使用kubectl taint命令可以给某个Node节点设置污点，Node被设置污点之后就和Pod之间存在一种相斥的关系，可以让Node拒绝Pod的调度执行，甚至将Node上已经存在的Pod驱逐出去。

每个污点的组成如下：

key=value:effect
每个污点有一个key和value作为污点的标签，effect描述污点的作用。当前taint effect支持如下选项：

NoSchedule：表示K8S将不会把Pod调度到具有该污点的Node节点上
PreferNoSchedule：表示K8S将尽量避免把Pod调度到具有该污点的Node节点上
NoExecute：表示K8S将不会把Pod调度到具有该污点的Node节点上，同时会将Node上已经存在的Pod驱逐出去


污点taint的NoExecute详解
taint 的 effect 值 NoExecute，它会影响已经在节点上运行的 pod：

如果 pod 不能容忍 effect 值为 NoExecute 的 taint，那么 pod 将马上被驱逐
如果 pod 能够容忍 effect 值为 NoExecute 的 taint，且在 toleration 定义中没有指定 tolerationSeconds，则 pod 会一直在这个节点上运行。
如果 pod 能够容忍 effect 值为 NoExecute 的 taint，但是在toleration定义中指定了 tolerationSeconds，则表示 pod 还能在这个节点上继续运行的时间长度。


 污点查看：
 kubectl describe node master |grep Taints



在Kubernetes 里，PersistentVolume（PV）和PersistentVolumeClaim （PVC）是两个独立的对象。

PV 是物理存储资源，可以是磁盘，也可以是网络文件系统（NFS）等等；而 PVC 是逻辑上的存储资源，用来申请存储空间，并与具体 PV 进行绑定。

下面是创建 PV 的步骤：

1. 创建 PV 的 YAML 文件

apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-vol1
spec:
  capacity:
    storage: 1Gi  # PV 容量大小
  accessModes:
    - ReadWriteOnce  # 存储访问模式，支持多个
  persistentVolumeReclaimPolicy: Retain  # 回收策略，Retain 为保留不删除
  nfs:
    server: 10.0.0.101  # 服务器 IP
    path: /data/nfs/pv-vol1  # 数据目录

2. 应用 PV 配置：
$ kubectl apply -f pv-vol1.yaml

3. 查看 PV 状态：
$ kubectl get pv

当 PV 创建成功之后，可以申请 PVC 并与之绑定来使用存储资源。需要注意的是，PVC 发布前必须先创建好对应的 PV。

创建pvc
PVC（Persistent Volume Claim）是 Kubernetes 用于声明使用其管理的存储的一种主题方式。下面是一个示例：

1. 创建一个 PVC YAML 文件：

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: example-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

这个 YAML 文件中定义了一个名为 `example-pvc` 的 `PersistentVolumeClaim` 资源。它请求的存储容量为 5GB。在 YAML 文件中，`accessModes` 定义了这个 PVC 的访问模式，即对这个 PVC 的访问权限，这里定义了这个 PVC 可以被读写一次（ReadWriteOnce）。`resources.requests.storage` 指定了这个 PVC 请求的存储资源容量。

2. 应用 YAML 文件：

$ kubectl apply -f pvc.yaml

这个操作将会使用这个 YAML 文件创建一个 PVC 资源。
PVC 资源的创建完成后，可以通过以下命令来查看这个 PVC 的状态：

kubectl get pvc

以上命令将会列出当前所有的 PVC 资源及其详细信息，您可以找到您创建的 PVC 并查看其状态。
删除 PVC 可以通过以下命令实现：

$ kubectl delete pvc example-pvc

这个命令将会删除 `example-pvc` 这个 PVC 资源。在删除 PVC 时，PV 并不会被自动删除。因此，您需要在删除 PVC 前检查当前 PVC 是否被任何 Pod 所使用。如果被使用，您需要首先删除使用它的 Pod，然后才能删除这个 PVC。