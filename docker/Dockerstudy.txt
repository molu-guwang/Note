依托于以下三技术：
cgroups、namespace、UFS


docker 网络

Host 模式介绍：
容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。
1、容器与主机在相同的网络命名空间下面，使用相同的网络协议栈，容器可以直接使用主机的所有网络接口
2、host 模式不能使用端口映射和自定义路由规则，这些都与主机一致，-p 与-icc 参数是无效的
3、host 模式下面的网络模型是最简单和最低延迟的模式，容器进程直接与主机网络接口通信，与物理机性能一致

container模式
与一个已存在的容器共享一个网络空间。
而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。
同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过lo网卡设备通信。

none
不使用网络。


bridge 网络模型介绍
默认网络
1、每一个容器使用自己的网络命名空间
2、每个容器的网络与主机的bridge 设备连接（主机与容器通信，容器间通信）
3、主机NAT（端口映射） 容器里面的数据包ip 与外部通信
4、官网推荐使用自定义bridge 网络，不使用默认的docker0。
自定义的bridge 比docker 默认的bridge 网络有更多功能和灵活性，详情见官网
5、各个bridge 里面的网络隔离，实现了自己局网连通，隔离其他局网
在bridge模式下，连在同一网桥上的容器可以相互通信
（若出于安全考虑，也可以禁止它们之间通信，方法是在DOCKER_OPTS变量中设置–icc=false，这样只有使用–link才能使两个容器通信）
Docker可以开启容器间通信（意味着默认配置--icc=true），也就是说，宿主机上的所有容器可以不受任何限制地相互通信，
这可能导致拒绝服务攻击。进一步地，Docker可以通过--ip_forward和--iptables两个选项控制容器间、容器和外部世界的通信。

自定义网络模式
bridge，overlay，MACVLAN

overlay
跨主机容器通讯

macvlan
每个容器虚拟一张带mac的网卡，基于虚拟vlan通讯。由mac绑定vlan。适合会频繁变动网络拓扑的情况。









docker 安装

curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
yum install -y yum-utils   device-mapper-persistent-data   lvm2
yum-config-manager     --add-repo     http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
yum install docker-ce docker-ce-cli containerd.io
systemctl start docker

docker加速
echo '{
    "registry-mirrors":["https://almtd3fa.mirror.aliyuncs.com"]
    "dns":["离物理机最近的dns"]
}' >> /etc/docker/daemon.json

#设置容器默认网络
{
  "debug": true,
  "default-address-pools": [
    {
      "base": "172.31.0.0/16",
      "size": 24
    }
  ]
}

#debian 源
echo "deb http://mirrors.163.com/debian/ jessie main non-free contrib
deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib
deb-src http://mirrors.163.com/debian/ jessie main non-free contrib
deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib" >>/etc/apt/sources.list
systemctl restart docker


启动失败：
 Active: failed (Result: start-limit)

 修改
/etc/docker/daemon.json
为/etc/docker/daemon.conf



修改docker存储目录
systemctl stop docker
mkdir -p /home/docker/lib
mkdir -p /etc/systemd/system/docker.service.d/
rsync -avz /var/lib/docker /home/docker/lib
echo " [Service]
ExecStart=
ExecStart=/usr/bin/dockerd  --graph=/home/docker/lib/docker " >> /etc/systemd/system/docker.service.d/devicemapper.conf
systemctl daemon-reload
systemctl restart docker
systemctl enable docker
查看目录是否为/home/docker/lib/docker
docker info


systemctl start docker启动失败看不到报错

可用dockerd启动


docker操作

查找image
docker search [imagename]

上传image
docker push [imagename]
本地上传到私有仓库
docker push IP:端口/image-name

拉取镜像
docker pull containername:taget
            容器名：标签
默认为最新版本


docker导出本地容器
docker export 58dbc2162141 > tomcat.tar
              容器ID/容器名    导出文件名及路径
导入到本地容器
docker import - new_tomcat_server < tomcat.tar
                    新镜像名          导入文件名及路径

docker导出本地镜像
docker save busybox-1 > /home/save.tar
            镜像名         导出文件名及路径
            不要用镜像ID，否则镜像名和标签都会是none
导入到本地镜像
docker load < /home/save.tar

save更完整，export会丢失镜像历史，无法做层回滚。
save文件对比export文件会更大


运行导入的镜像必须带command，否则启动会报错：Error response from daemon: No command specified
具体的command需要在导出容器的时候通过docker ps 查看到
看完整的command的内容： docker ps  --no-trunc
docker-compose创建的镜像不建议导出，会获取不到docker-compose.yaml里面配置的参数。
docker-compose镜像迁移可尝试在注意目录下写入的配置文件下，打包docker-compose.yaml下的整个目录，在新的机器上run。
docker使用

查看images layer
docker history docker.io/images:tag
查看layer详细信息：
docker history --no-trunc docker.io/images:tag

重命名镜像
docker tag [镜像id] [新镜像名称]:[新镜像标签]

重命名容器
 docker rename [old_containername] [new_containername]


在运行docker容器时可以加如下参数来保证每次docker服务重启后容器也自动重启：--restart=always
如果已经启动了则可以使用如下命令：docker update --restart=always <CONTAINER ID>

查看docker 网络
docker network ls
查看某个网络ID/网络模式的详细信息
docker network inspect networkID/networkTYPE

创建自定义网络
docker network create -d bridge mynet2  --subnet=10.10.10.0/24
指定容器网络IP
删除网络
docker network rm mynet2

查看bridge网络信息
yum install -y bridge-utils
brctl show

docker run -itd --name redis --sysctl net.core.somaxconn=1024 -e TIME_ZONE="Asia/Shanghai" -e TZ="Asia/Shanghai"   -p 6379:6379 redis:5.0.5

docker run -itd --name redis -p 6379:6379 redis:5.0  --requirepass "Gemhone_2018"

docker run -itd --nat bridge --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=Gemhone_2018 mysql:5.6.36
					以什么网络启动	    容器名  主机端口:容器端口								基础镜像及标签

docker run -itd -p 8090:8080  -v /home/jenkins/jenkins_data/:/home/jenkins/jenkins_data/ tomcat_test
									主机目录					挂载于容器目录
可以使用-v来创建或者指定一个数据卷/单个文件挂载到容器里，一次run可挂载多个数据卷
类似mount 权限默认读写，只读用:ro指定
挂载数据卷容器使用--volumes-from
数据卷容器不需要保持在运行状态
可以利用这个来保存、备份、迁移容器数据

-e #指定环境变量    格式：环境变量：值
-d #后台运行容器，并返回容器ID
-i #以交互式模式运行容器,让标准输出保持打开，常与-t参数同时使用
-t #给容器重新分配一个伪终端，添加tag，指定新镜像的用户信息，常与-i参数同时使用
–name #给容器指定一个名称  容器名唯一
-b 指定容器挂载网桥
--shm-size 指定共享内存，默认64M
-icc=true|false 是否支持容器间通信，默认支持
-iptables=true|false 是否允许docker添加iptables规则
--dns=xxx 指定容器DNS服务器，默认主机/etc/resolv.conf 里的配置
成都电信dns 202.98.96.68

修改已有镜像的共享内存大小：
第一步：docker ps  查看容器id
第二步：cd /进入主目录，通过cd var/lib/containers/容器id开头的一串数字 进入容器所在的配置目录
第三步：vim hostconfig.json 和config.v2.json vim模式更改shm

docker run -it -v $(pwd)/host-dava:/container-data alpine sh

docker exec -it containername /bin/bash -c 'command'
宿主机执行docker容器命令，如涉及环境变量。添加export 环境变量
-u 指定执行命令的用户

删除标签为none的镜像
docker images | grep none |tr -s ' ' |cut -d ' ' -f 3 |xargs docker rmi  -f


docker Centos容器执行systemctl 命令报错：
Failed to get D-Bus connection: Operation not permitted
Docker的设计理念是在容器里面不运行后台服务，容器本身就是宿主机上的一个独立的主进程，也可以间接的理解为就是容器里运行服务的应用进程。
一个容器的生命周期是围绕这个主进程存在的，所以正确的使用容器方法是将里面的服务运行在前台。

再说到systemd，这个套件已经成为主流Linux发行版（比如CentOS7、Ubuntu14+）默认的服务管理，取代了传统的SystemV风格服务管理。
systemd维护系统服务程序，它需要特权去会访问Linux内核。而容器并不是一个完整的操作系统，只有一个文件系统，而且默认启动只是普通用户这样的权限访问Linux内核。
需在创建容器时执行如下命令
docker run -d -name centos7 --privileged=true centos:7 /usr/sbin/init

要么找到命令的绝对路径，直接执行命令，不用systemctl代理

容器通外网需要设置本机开启路由转发，同时在启动docker时添加--ip-foeward=true
查看容器端口映射情况
docker port 容器名 映射后的端口

容器互联 --link
docker run -d -p --name wed --link db:db  training/webapp python app.py
                   要连接的容器的名称:连接的别名
其中连接信息在环境变量及/etc/hosts中
可使用 env查看
docker run --rm --name web2 --link db:db training/webapp env
或者查看父容器的hosts
docker run -ti -rm --link db:db training/webapp /bin/bash
root@xxxxx:/opt/webapp#cat /etc/hosts
其中，第一行是父容器名		第二行是连接的容器名
可安装ping命令来测试容器间的网络连通性。


给正在运行的容器添加环境变量
添加在如下两个文件
/etc/profile
/{user}/.bashrc
再source即可生效

docker打包正在运行的镜像
docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]

-a :提交的镜像作者；
-c :使用Dockerfile指令来创建镜像；
-m :提交时的说明文字；
-p :在commit时，将容器暂停。

默认情况下，正在提交的容器及其进程将在映像提交时暂停。 这减少了在创建提交过程中遇到数据损坏的可能性。 如果不需要此行为，请将--pause选项设置为false。
-c 选项将对创建的映像应用Dockerfile指令。支持Dockerfile指令 CMD|ENTRYPOINT|ENV|EXPOSE|LABEL|ONBUILD|USER|VOLUME|WORKDIR


docker在运行容器添加暴露端口
firewall-cmd --add-forward-port=port=7082:proto=tcp:toaddr=172.17.0.2:toport=7082 --permanent
                             主机暴露端口                        容器IP：容器暴露端口
添加对应链的防火墙规则
iptables -I INPUT 1 -p tcp  -m state --state NEW -m tcp --dport 7082 -j ACCEPT
iptables -I DOCKER 1  -p tcp  -m state --state NEW -m tcp --dport 7082 -j ACCEPT
iptables -I IN_public_allow 1  -p tcp  -m state --state NEW -m tcp --dport 7082 -j ACCEPT


Dockerfile

分为四部分：
基础镜像信息、维护者信息、镜像操作指令、容器启动时的执行指令

其中
FROM 指明基础镜像，同时创建多个镜像时，可多个FROM，每个镜像一次，且FROM必须为第一条指令。

MAINTAINER 指定维护者/镜像编辑者的邮件地址

ENV 指定环境变量，会被后续RUN指令使用，在容器运行时保持。
格式 ENV <key> <value>

RUN 对镜像执行的指令，每运行一条RUN，镜像添加一层可读层，并提交为新的镜像。
基本格式：
RUN <command> 或 RUN ["executable"，"param1"，"param2"]
前者为将在shell终端运行的命令；后者为exec执行的可执行文件。指定其他终端可使用后者实现，如 RUN ["/bin/bash","-C","hello word"]

ENTRPOINT
基本格式：
ENTRPOINT ["executable","param1","param2"]  使用exec执行
ENTRPOINT command param1 param2 在/bin/bash中执行，提供给需要交互的应用
每个dockerfile只能有一个ENTRPOINT，指定多个时，最后一个生效

VOLUME 创建一个从本地主机或本地其他容器的挂载点
VOLUME ["/data"]

EXPOSE 指定容器暴露的端口号，启动容器时需要指定-P docker主机会自动分配端口转发到此端口

USER 指定运行容器的用户名及UID，后续RUN也会使用这个指定用户

WORKDIR 为后续的RUN、CMD、ENTRPOINT指定配置的工作目录
使用多个WORKDIR 后续命令参数为相对路径，则会继承之前WORKDIR路径

ONBUILD 配置所创建镜像为其他新镜像的基础镜像
ONBUILD [INSTRUCTION]
如
...
ONBUILD ADD . /app/src
ONBUILD RUN /usr/local/bin/python-build --dir /app/src
...
以上为镜像image-A

FROM image-A指定image-A为基础镜像时，ONBUILD就等价于以下两条命令:
ADD . /app/src
RUN /usr/local/bin/python-build --dir /app/src

ADD/COPY 指定文件到容器中
格式 ADD/COPY <src> <dest>  其中，源地址可以是dockerfile所在目录的相对路径、url；tar包会自动解压为目录
源地址为本地目录时建议使用COPY

CMD 指定容器运行时的操作指令
基本格式：
CMD ["executable","param1","param2"]  使用exec执行
CMD command param1 param2 在/bin/bash中执行，提供给需要交互的应用
CMD ["param1","param2"] 提供给ENTRYPOINT的默认参数
每个dockerfile只能有一条CMD命令，如果指定多条，只有最后一条会被执行。
如果启动容器时指定了运行命令，则会覆盖掉CMD指定的命令

创建镜像：
编写完dockerfile后，可使用docker build来创建镜像
docker build [选项] 路径
该命令将会读取路径下（包括子目录）的dockerfile，并将其中dockerfile发送给docker服务端，由服务端来创建镜像



/usr/bin/docker-current: Error response from daemon: error creating overlay mount to /var/lib/docker/overlay2/d59b250148985ddae6ce13-init/merged: invalid argument.
See '/usr/bin/docker-current run --help'.

因为image用的overlay2文件系统，而系统默认只能识别overlay文件系统

更新文件系统
systemctl stop docker
rm -rf /var/lib/docker #会删除docker images
vi /etc/sysconfig/docker-storage
指定 DOCKER_STORAGE_OPTIONS="--storage-driver overlay"

vi /etc/sysconfig/docker
#OPTIONS='--selinux-enabled --log-driver=journald --signature-verification=false'
改为
OPTIONS='--log-driver=journald --signature-verification=false'

systemctl start docker

注意：一个镜像不能超过127层




docker compose
通过 docker compose 管理的一个项目被抽象称为一个 project，它是由一组关联的应用容器组成的一个完整的业务单元。
简单点说就是一个 docker-compose.yml 文件定义一个 project。
我们可以在执行 docker-compose 命令时通过 -p 选项指定 project 的名称，如果不指定，则默认是 docker-compose.yml 文件所在的目录名称。
Compose 是 docker 提供的一个命令行工具，用来定义和运行由多个容器组成的应用。
运行步骤
定义 Dockerfile
定义 docker-compose.yml
运行 docker-compose up

docker-compose 定义了一组service来组成一个project，通过docker-compose.yml中service的定义与container建立关系(service与容器的对应关系)，
最后使用container来完成对docker-py(Python版的docker client) 的调用，向docker daemon发起http请求。



docker-compose.yml 属性

version：指定 docker-compose.yml 文件的写法格式
context：Dockerfile的文件路径，也可以是到链接到git仓库的url，当提供的值是相对路径时，被解析为相对于撰写文件的路径，此目录也是发送到Docker守护进程的context
services：多个容器集合
build：配置构建时，Compose 会利用它自动构建镜像，该值可以是一个路径，也可以是一个对象，用于指定 Dockerfile 参数
command：覆盖容器启动后默认执行的命令
dns：配置 dns 服务器，可以是一个值或列表
dns_search：配置 DNS 搜索域，可以是一个值或列表
environment：环境变量配置，可以用数组或字典两种方式
env_file：从文件中获取环境变量，可以指定一个文件路径或路径列表，其优先级低于 environment 指定的环境变量
expose：暴露端口，只将端口暴露给连接的服务，而不暴露给主机
image：指定服务所使用的镜像
network_mode：设置网络模式
ports：对外暴露的端口定义，和 expose 对应
links：将指定容器连接到当前连接，可以设置别名，避免ip方式导致的容器重启动态改变的无法连接情况
volumes：挂载一个目录或者一个已存在的数据卷容器，可以直接使用 [HOST:CONTAINER]格式，或者使用[HOSTCONTAINERro]格式，后者对于容器来说，数据卷是只读的，可以有效保护宿主机的文件系统
logs：日志输出信息
dockerfile：使用dockerfile文件来构建，必须指定构建路径
image：指定服务的镜像名称或镜像ID。如果镜像在本地不存在，Compose将会尝试拉取镜像
restart：重启策略
container_name：Compose容器名称格式是：<项目名称><服务名称><序号> 可以自定义项目名称、服务名称，但如果想完全控制容器的命名，可以使用标签指定
hostname：容器的hostname
networks：设置网络模式
depends_on: 依赖于

eg1：
version: '3.3'

services:
  gateway:
    build:
      context: ../dc3-gateway/
      dockerfile: ./Dockerfile
    image: pnoker/dc3-gateway:1.0.0
    restart: always
    ports:
      - 8000:8000
    container_name: dc3-gateway
    hostname: dc3-gateway
    volumes:
      - logs:/dc3-gateway/dc3/logs
    networks:
      dc3net:
        aliases:
          - dc3-gateway
volumes:
  logs:

networks:
  dc3net:
    driver: 'bridge'






当服务的配置发生更改时，可使用 docker-compose up 命令更新配置
此时，Compose 会删除旧容器并创建新容器，新容器会以不同的 IP 地址加入网络，名称保持不变，任何指向旧容起的连接都会被关闭，重新找到新容器并连接上去


安装：
检查是否有pip
pip -V
安装epel源
yum -y install epel-release*
安装pip
yum -y install python-pip
查看pip版本
pip -V
升级pip
pip install --upgrade pip
安装docker-compose
pip install docker-compose
查看docker-compose版本
docker-compose -version


docker-compose -f docker-compose-demo.yml up -d
-f 指定yaml文件，默认docker-compose.yml
up/down 启动状态
-d 后台运行

查看日志
docker-compose -f docker-compose-demo.yml logs

docker-compose up -d nginx 构建建启动nignx容器
docker-compose exec nginx bash 登录到nginx容器中
docker-compose down 删除所有nginx容器,镜像
docker-compose ps 显示所有容器
docker-compose restart nginx 重新启动nginx容器
docker-compose run --no-deps --rm php-fpm php -v 在php-fpm中不启动关联容器，并容器执行php -v 执行完成后删除容器
docker-compose build nginx 构建镜像 。
docker-compose build --no-cache nginx 不带缓存的构建。
docker-compose logs nginx 查看nginx的日志
docker-compose logs -f nginx 查看nginx的实时日志
docker-compose config -q 验证（docker-compose.yml）文件配置，当配置正确时，不输出任何内容，当文件配置错误，输出错误信息。
docker-compose events --json nginx 以json的形式输出nginx的docker日志
docker-compose pause nginx 暂停nignx容器
docker-compose unpause nginx 恢复ningx容器
docker-compose rm nginx 删除容器（删除前必须关闭容器）
docker-compose stop nginx 停止nignx容器
docker-compose start nginx 启动nignx容器

https://www.php.cn/manual/view/35844.html


docker-compose ps

docker-compose stop
docker-compose stop [options] [SERVICE...]
-t, –timeout TIMEOUT 停止容器时候的超时（默认为10秒）

docker-compose down
docker-compose down [options]
停止和删除容器、网络、卷、镜像。
–rmi type，删除镜像，类型必须是：all，删除compose文件中定义的所有镜像；local，删除镜像名为空的镜像
-v, –volumes，删除已经在compose文件中定义的和匿名的附在容器上的数据卷
–remove-orphans，删除服务中没有在compose中定义的容器

docker-compose logs
docker-compose logs [options] [SERVICE...]
查看服务容器的输出。默认情况下，docker-compose将对不同的服务输出使用不同的颜色来区分。可以通过–no-color来关闭颜色。

docker-compose build
docker-compose build [options] [--build-arg key=val...] [SERVICE...]
构建（重新构建）项目中的服务容器。
–compress 通过gzip压缩构建上下环境
–force-rm 删除构建过程中的临时容器
–no-cache 构建镜像过程中不使用缓存
–pull 始终尝试通过拉取操作来获取更新版本的镜像
-m, –memory MEM为构建的容器设置内存大小
–build-arg key=val为服务设置build-time变量
服务容器一旦构建后，将会带上一个标记名。可以随时在项目目录下运行docker-compose build来重新构建服务

docker-compose pull
docker-compose pull [options] [SERVICE...]
拉取服务依赖的镜像。
–ignore-pull-failures，忽略拉取镜像过程中的错误
–parallel，多个镜像同时拉取
–quiet，拉取镜像过程中不打印进度信息

docker-compose restart
docker-compose restart [options] [SERVICE...]
重启项目中的服务。
-t, –timeout TIMEOUT，指定重启前停止容器的超时（默认为10秒）

docker-compose rm
docker-compose rm [options] [SERVICE...]
删除所有（停止状态的）服务容器。
–f, –force，强制直接删除，包括非停止状态的容器
-v，删除容器所挂载的数据卷
推荐先执行docker-compose stop命令来停止容器。

docker-compose start

docker-compose run
docker-compose run [options] [-v VOLUME...] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]
在指定服务上执行一个命令。
docker-compose run ubuntu ping www.baidu.com
在指定容器上执行一个ping命令。

docker-compose scale
docker-compose scale web=3 db=2
设置指定服务运行的容器个数。通过service=num的参数来设置数量

docker-compose pause
docker-compose pause [SERVICE...]
暂停一个服务容器

docker-compose kill
docker-compose kill [options] [SERVICE...]
通过发送SIGKILL信号来强制停止服务容器。
支持通过-s参数来指定发送的信号。
docker-compose kill -s SIGINT

dokcer-compose config
docker-compose config [options]
验证并查看compose文件配置。
–resolve-image-digests 将镜像标签标记为摘要
-q, –quiet 只验证配置，不输出。 当配置正确时，不输出任何内容，当文件配置错误，输出错误信息
–services 打印服务名，一行一个
–volumes 打印数据卷名，一行一个

docker-compose create
docker-compose create [options] [SERVICE...]
为服务创建容器。
–force-recreate：重新创建容器，即使配置和镜像没有改变，不兼容–no-recreate参数
–no-recreate：如果容器已经存在，不需要重新创建，不兼容–force-recreate参数
–no-build：不创建镜像，即使缺失
–build：创建容器前，生成镜像

docker-compose exec
docker-compose exec [options] SERVICE COMMAND [ARGS...]
-d 分离模式，后台运行命令。
–privileged 获取特权。
–user USER 指定运行的用户。
-T 禁用分配TTY，默认docker-compose exec分配TTY。
–index=index，当一个服务拥有多个容器时，可通过该参数登陆到该服务下的任何服务。
例如：docker-compose exec –index=1 web /bin/bash ，web服务中包含多个容器

docker-compose port
docker-compose port [options] SERVICE PRIVATE_PORT
显示某个容器端口所映射的公共端口。
–protocol=proto，指定端口协议，TCP（默认值）或者UDP
–index=index，如果同意服务存在多个容器，指定命令对象容器的序号（默认为1）

docker-compose push
docker-compose push [options] [SERVICE...]
推送服务依的镜像。
–ignore-push-failures 忽略推送镜像过程中的错误

docker-compose unpause
docker-compose unpause [SERVICE...]
恢复处于暂停状态中的服务。