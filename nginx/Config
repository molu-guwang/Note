Nginx：

		http://nginx.org/， C10k;

		Igor Sysoev, Rambler Media;
			engine X: nginx

			tengine, OpenResty

		Nginx的特性：
			模块化设计、较好扩展性；
			高可靠性
				master/worker
			支持热部署
				不停机更新配置文件、更换日志、更新服务器程序版本；
			低内存消耗
				10000个keep-alive连接模式下的非活动连接仅消耗2.5M内存；
			event-driven, aio, mmap；

		基本功能：
			静态资源的web服务器；
			http协议的反向代理服务器；
			pop3, smpt, imap4等邮件协议的反向代理；
			能缓存打开的文件（元数据）、支持FastCGI（php-fpm）, uWSGI（Python Web Framwork）等协议
			模块化（非DSO机制），过滤器zip，SSI，SSL；

		web服务相关的功能：
			虚拟主机（server）、keepalive、访问日志（支持基于日志缓冲提高其性能）、url rewirte、路径别名、基于IP及用户的访问控制、支持速率限制及并发数限制；
			……

		Nginx的基本架构：
			master/worker
				一个master进程，可生成一个或多个worker进程；
				事件驱动：epoll(Linux), kqueue（FreeBSD）, /dev/poll(Solaris)
					消息通知：select, poll, rt signals
				支持sendfile,  sendfile64
				支持AIO，mmap

				master: 加载配置文件、管理worker进程、平滑升级，...
				worker：http服务，http代理，fastcgi代理，...

		模块类型：
			核心模块：core module
			Standard HTTP modules
			Optional HTTP modules
			Mail modules
			3rd party modules

		用来做什么 ？
			静态资源的web服务器；
			http服务器反向代理；

	nginx安装配置：

		#
		# ./configure --prefix=/usr/local/nginx --conf-path=/etc/nginx/nginx.conf --user=nginx --group=nginx  --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx/nginx.pid --lock-path=/var/lock/nginx.lock --with-http_ssl_module --with-http_stub_status_module --with-http_gzip_static_module --with-debug
		# make && make install

		配置文件的组成部分：
			主配置文件：nginx.conf
				include conf.d/*.conf
				/etc/nginx/conf.d/*.conf
			fastcgi的配置文件：fastcgi_params
							   uwsgi_params

		配置指令(必须以分号结尾)：
			Directive  value1 [value2...];

			支持使用变量：
				内置变量：由模块引入；
				自定义变量：
					set  variable  value;

				引用变量：$variable

		配置文件组织结构
			main block
			event {
				...
			}
			http {
				...
			}

			http配置段：
				http {
					...
					server {
						...
						server_name
						root
						alias
						location /uri/ {

						}
						...
					}
					server {
						...
					}
				}

			main配置段：
				类别：
					正常运行必备的配置；
					优化性能相关的配置；
					用于调试、定位问题的配置；

				正常运行必备的配置：
					1、user USERNAME  [GROUPNAME];
						指定用于运行worker进程的用户和组；

						user  nginx  nginx;

					2、pid  /PATH/TO/PID_FILE;
						指定nginx进程的pid文件路径；

						pid  /var/run/nginx.pid;

					3、worker_rlimit_nofile #;
						指定一个worker进程所能够打开的最大文件描述符数量；

					4、worker_rlimit_sigpending #;
						指定每个用户能够发往worker进程的信号的数量；

				性能优化相关的配置：
					1、worker_processes #;
						worker进程的个数；通常应该为物理CPU核心数量减1；
						可以为"auto"，实现自动设定；

					2、worker_cpu_affinity  CPUMASK CPUMASK ...;
						CPUMASK:
							0001
							0010
							0100
							1000

						worker_cpu_affinity 00000001 00000010 00000100;

					3、worker_priority  nice;
						[-20, 19]

				调试、定位问题的配置：
					1、daemon  off|on;
						是否以守护进程方式启动nignx；

					2、master_process  on|off;
						是否以master/worker模型运行nginx；

					3、error_log  /PATH/TO/ERROR_LOG level;
						错误日志文件及其级别；出于调试的需要，可以设定为debug；但debug仅在编译时使用了“--with-debug”选项时才有效；

IO模型、Nginx

	IO模型：
		阻塞
		非阻塞
		IO复用（select, poll）
		信号驱动的IO（epoll, kqueue, /dev/poll）
		AIO

		nginx特性：epoll, aio, mmap
			master/worker

		nginx.conf
			main配置段
			event {
				...
			}
			http {
				...
				server {
					server_name
					root
					location /uri/ {
						...
					}
				}
				server {
					...
				}
			}

Nginx(2)

	nginx.conf的配置：
		main配置段
		event {
			...
		}

			1、worker_connections #;
				每个worker进程所能够响应的最大并发请求数量；

				worker_proceses * worker_connections

			2、use  [epoll|rgsig|select|poll];
				定义使用的事件模型；建议让nginx自动选择；

			3、accept_mutex [on|off];
				各worker接收用户的请求的负载均衡锁；启用时，表示用于让多个worker轮流地、序列化地响应新请求；

			4、lock_file  /PATH/TO/LOCK_FILE;

		http {
			...
		}

			套接字或主机相关的指令
				1、server {}
					定义一个虚拟主机；

					server {
						listen PORT;
						server_name NAME;
						root /PATH/TO/DOCUMENTROOT;
					}
					...

					注意：
						(1) 基于port；
							listen指令监听在不同的端口；
						(2) 基于hostname
							server_name指令指向不同的主机名；
				2、listen
					listen address[:port] [default_server] [ssl] [http2 | spdy]
					listen port [default_server] [ssl] [http2 | spdy]

						default_server：设置默认虚拟主机；用于基于IP地址，或使用了任意不能对应于任何一个server的name时所返回站点；
						ssl：用于限制只能通过ssl连接提供服务；
						spdy：SPDY protocol（speedy），在编译了spdy模块的情况下，用于支持SPDY协议；
						http2：http version 2；

				3、server_name NAME [...];
					后可跟一个或多个主机名；名称还可以使用通配符和正则表达式(~)；

						(1) 首先做精确匹配；例如：www.mr5.com
						(2) 左侧通配符；例如：*.mr5.com
						(3) 右侧通配符，例如：www.mr5.*
						(4) 正则表达式，例如：~^.*\.mr5\.com$
						(5) default_server

				4、tcp_nodelay on|off;
					对keepalive模式下的连接是否使用TCP_NODELAY选项；

				5、tcp_nopush on|off;
					是否启用TCP_NOPUSH(FREEBSE）或TCP_CORK(Linux)选项；仅在sendfile为on时有用；

				6、sendfile on|off;
					是否启用sendfile功能；

			路径相关的指令：
				7、root
					设置web资源的路径映射；用于指明请求的URL所对应的文档的目录路径；

						server {
							...
							root  /data/www/vhost1;
						}
						http://www.mr5.com/images/logo.jpg --> /data/www/vhosts/images/logo.jpg

						server {
							...
							server_name  www.mr5.com;
							location /images/ {
								root  /data/imgs/;
								...
							}
						}

						http://www.mr5.com/images/logo.jpg --> /data/imgs/images/logo.jpg

				8、	location [ = | ~ | ~* | ^~ ] uri { ... }
				        location @name { ... }

				        功能：允许根据用户请求的URI来匹配定义的各location，匹配到时，此请求将被相应的location块中的配置所处理；简言之，即用于为需要用到专用配置的uri提供特定配置；

						server {
							...
							server_name www.mr5.com;
							root /data/www;

							location  /admin/  {
								...
							}
						}

						=：URI的精确匹配；
						~：做正则表达式匹配，区分字符大小写；
						~*：做正则表达式匹配，不区分字符大小写；
						^~：URI的左半部分匹配，不区分字符大小写；

						匹配优先级：精确匹配=、^~、~或~*、不带符号的URL；

				9、alias
					只能用于location配置段，定义路径别名；

					location  /images/ {
						root /data/imgs/;
					}

					location  /images/  {
						alias /data/imgs/;
					}

					注意：
						root指令：给定的路径对应于location的“/”这个URL；
							/images/test.jpg -->  /data/imgs/images/test.jpg
						alias指令：给定的路径对应于location的’/uri/‘这个URL；
							/images/test.jpg -->  /data/imgs/test.jpg
				10、index
					index file ...;

					默认主页面；

				11、error_page code ... [=[response]] uri;
					根据http的状态码重定向错误页面；
						error_page  404  /404.html
						error_page  404  =200  /404.html  （以指定的响应状态码进行响应）

				12、try_files file ... uri;
				        try_files file ... =code;

				        尝试查找第1至第N-1个文件，第一个即为返回给请求者的资源；若1至N-1文件都不存在，则跳转至最一个uri（必须不能匹配至当前location，而应该匹配至其它location，否则会导致死循环）；

			客户端请求相关的配置：

				13、keepalive_timeout timeout [header_timeout];
					设定keepalive连接的超时时长；0表示禁止长连接；默认为75s；

				14、keepalive_requests number;
					在keepalived连接上所允许请求的最大资源数量；默认为100；

				15、keepalive_disable none | browser ...;
					指明禁止为何种浏览器使用keepalive功能；

				16、send_timeout #;
					发送响应报文的超时时长，默认为60s;

				17、client_body_buffer_size size;
					接收客户请求报文body的缓冲区大小；默认为16k；超出此指定大小时，其将被移存于磁盘上；

				18、client_body_temp_path path [level1 [level2 [level3]]];
					设定用于存储客户端请求body的临时存储路径及子目录结构和数量；

					client_body_temp_path  /var/tmp/client_body  2 2;

			对客户端请求的进行限制
				19、limit_excpet  METHOD {...}
					对指定范围之外的其它的方法进行访问控制；

					limit_except  GET {
						allow  172.16.0.0/16;
						deny all;
					}

				20、limit_rate  speed;
					限制客户端每秒钟所能够传输的字节数，默认为0表示无限制；

			文件操作优化相关的配置

				21、aio  on|off;

				22、directio  size|off;
					Enables the use of the O_DIRECT flag (FreeBSD, Linux), the F_NOCACHE flag (Mac OS X), or the directio() function (Solaris), when reading files that are larger than or equal to the specified size.

				23、open_file_cache off;
					open_file_cache max=N [inactive=time];
						nginx可以缓存以下三种信息：
							(1) 文件描述符、文件大小和最近一次的修改时间；
							(2) 打开的目录的结构；
							(3) 没有找到的或者没有权限操作的文件的相关信息；

						max=N表示可缓存的最大条目上限；一旦达到上限，则会使用LRU算法从缓存中删除最近最少使用的缓存项；

						inactive=time：在此处指定的时长内没有被访问过的缓存项是为非活动缓存项，因此直接删除；

				24、open_file_cache_errors on | off;
					是否缓存找不到其路径的文件，或没有权限没有权限访问的文件相关信息；

				25、open_file_cache_valid time;
					每隔多久检查一次缓存中缓存项的有效性；默认为60s;

				26、open_file_cache_min_uses number;
					缓存项在非活动期限内最少应该被访问的次数；

			ngx_http_access_module模块的配置（基于IP的访问控制）
				27、allow address | CIDR | unix: | all;
				28、deny address | CIDR | unix: | all;

					应用上下文：http, server, location, limit_except

			ngx_http_auth_basic_module模块的配置（basic认证）
				29、auth_basic string | off;
					使用http basic认证协议对用户进行认证；

				30、auth_basic_user_file file;
					实现用户认证的账号文件；

						文件格式：
							name1:password1
							name2:password2:comment

						密码格式：
							(1) encrypted with the crypt() function;
							(2) md5加密;

							location /admin/ {
							auth_basic "Admin Area";
							auth_basic_user_file /etc/nginx/.ngxhtpasswd;
							}

			ngx_http_log_module模块的配置（访问日志）
				31、log_format  name  string  ...;
					定义日志格式及其名称；日志格式一般通过调用内置变量来定义；

				32、access_log path [format [buffer=size [flush=time]]];
					access_log off;

					访问日志文件路径，格式名称以及缓存大小和刷写时间间隔；建议定义缓冲以提升性能；

				33、open_log_file_cache max=N [inactive=time] [min_uses=N] [valid=time];
					open_log_file_cache off;

			ngx_http_stub_status_module模块配置：
				34、stub_status;
					通过指定的uri输出stub status；

					Active connections: 291
					server accepts handled requests
					16630948 16630948 31070465
					Reading: 6 Writing: 179 Waiting: 106

					Active connections：当前活动的客户端连接数；
					accepts：已经接受的客户端连接总数量；
					handled：已经处理过后客户端连接总数量；
					requests：客户端的总的请求数量；
					Readking：正在读取的客户端请求的数量；
					Writing：正向其发送响应报文的连接数量；
					Waiting：等待其发出请求的空闲连接数量；


			ngx_http_referer_module模块配置（基于请求报文中的Referer首部的值做访问控制）
				35、valid_referers  none | blocked | server_names | string ...;

					none：请求报文不存在referer首部；
					blocked：请求报文中存在referer首部，但其没有有效值，或其值非以http://或https://开头；
					server_names：其值为一个主机名；
					arbitrary string：直接字符串，可以使用*通配符；
					regular expression：以~起始的正则表达式；

					内置变量：$invalid_referer（所有不能符合valid_referer指定定义的引用请求均为不合法引用）

				示例
					valid_referers   none   blocked   server_names   *.example.com   example.*  www.example.org/galleries/   ~\.google\.;
					if ($invalid_referer) {
						return  403;
					}





	ngx_http_ssl_module模块配置

		ssl_certificate file;
			证书文件路径；
		ssl_certificate_key file;
			证书对应的私钥文件；
		ssl_ciphers ciphers;
			指明由nginx使用的加密算法，可以是OpenSSL库中所支持各加密套件；
		ssl_protocols [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2];
			指明支持的ssl协议版本，默认为后三个；
		ssl_session_cache off | none | [builtin[:size]] [shared:name:size];
			指明ssl会话缓存机制；
				builtin：使用OpenSSL内置的ssl会话缓存，对机制为各worker私有；
				shared：在各worker之间使用一个共享的缓存；
					name：独有名称；
					size：缓存空间大小；
		ssl_session_timeout time;
			ssl会话超时时长；即ssl session cache中的缓存有效时长；

	ngx_http_rewrite_module模块配置
		将请求的url基于正则表达式进行重写；
			http --> https,  domain1.tld --> domain2.tld, uri1 --> uri2, ...

		指令：
			rewrite  regex  replacement [flag];
				regex：正则表达式，用于匹配用户请求的url；
				replacement：重写为的结果；
				[flag]：
					last：重写完成之后停止对当前uri的进一步处理，改为对新url的新一轮处理；
					break：重写完成之后停止当uri的处理，转向其后面的其它配置；
					redirect：重写完成之后会返回客户端一个临时的重定向，由客户端对新的url重新发起请求（302）；
					permanent：重写完成之后会返回客户端一个永久的重定向，由客户端对新的url重新发起请求（301）；

					server {
						...
						rewrite ^(/download/.*)/media/(.*)\..*$ $1/mp3/$2.mp3 last;
						rewrite ^(/download/.*)/audio/(.*)\..*$ $1/mp3/$2.ra  last;
						return  403;
						...
					}

					http://www.mr5.com/download/a/b/c/media/32.wmv  -->
						/download/a/b/c/mp3/32.mp3

				PCRE正则表达式元字符
					字符匹配：., [ ], [^]
					次数匹配：*, +, ?, {m}, {m,}, {m,n}
					位置锚定：^, $
					或者：|
					分组：(), 后向引用, $1, $2, ...

			if (condition) { ... }
				条件判断，引用新的配置上下文；

				condition：
					比较表达式：
						==，!=
						~：模式匹配，区分字符大小写；
						~*：模式匹配，不区分字符大小写；
						!~：模式不匹配，区分字符大小写；
						!~*: 模式不匹配，不区分字符大小写；
					文件及目录判断：
						-f, !-f：是否存在且为普通文件；
						-d, !-d: 是否存在且为目录；
						-e, !-e：是否存在；
						-x, !-x：是否存在且可执行；



		ngx_http_gzip_module模块配置

			gzip on | off;
				启用或禁用gzip压缩响应报文；
			gzip_comp_level level;
				压缩比，1-9，默认为1;
			gzip_disable regex ...;
				regex是为用于匹配客户端响应器类型的正则表达式；
				表示对何种浏览器禁止使用压缩功能；
			gzip_min_length length;
				触发压缩功能的响应报文的最小长度；
			gzip_http_version 1.0 | 1.1;
				设定启用压缩功能时，协议的最小版本；
			gzip_proxied off | expired | no-cache | no-store | private | no_last_modified | no_etag | auth | any ...;
				定义对客户端请求的具有何种请求属性的资源启用压缩功能；如expired则表示对由于使用了expire首部而无法缓存的对象启用压缩功能；
			gzip_types mime-type ...;
				指明仅对哪些类型的资源执行压缩操作；即压缩过滤器；

			示例：
				gzip  on;
				gzip_http_version 1.0;
				gzip_comp_level 6;
				gzip_disable msie6;
				gzip_min_length 2;
